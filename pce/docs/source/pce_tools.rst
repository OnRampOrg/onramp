PCE.tools
=========

The PCE.tools package contains the Python modules, classes, and functions for administering OnRamp educational modules and jobs. The package is broken into the modules, jobs, and schedulers python modules, and also contains support functions for tracking and requesting output files generated by modules.

PCE.tools.modules
-----------------

This Python module contains a class for working with module state (documented in the section, Working with Module and Job State) and the following:

For working with module sources:
The PCE service was designed to allow installation of modules from various sources, such as, the local filesystem, git repositories, tarballs, etc. The supported types are mapped to functions that handle them in the source_handlers dictionary. Currently, only the local filesystem is supported as a module source. It is mapped to the _local_checkout() function under the key 'local'. A list of supported source types is returned by get_source_types().

For administering modules:
Modules can be installed from supported sources via the install_module() function. This function checks the module out from the given source, creates a local copy under the given parent folder with the given id and name and creates folders needed by the PCE service. Upon success or failure, the state of the module is stored using the ModState class. The deploy_module() function executes the module's deploy script, logs any output, and updates the module's state as required. The init_module_delete() function is used to trigger deletion of a module. In the current version of the PCE, modules may exist in states that cannot allow immediate deletion (mostly when bin/onramp_*.py scripts are executing), thus, this function does not perform any of actions needed for deletion. These are accomplished by the call to _delete_module(). If the module is in an acceptable delete state when init_module_delete() is called, then _delete_module() is immediately called. If not, the module's state is flagged for deletion when the module reaches an acceptable delete state. For this reason, all transitions of module state from an unacceptable delete state to an acceptable one must check the module's state and call _delete_module() if the state is flagged for deletion.

For viewing modules on the system:
The get_modules() function returns a list of modules available on the system, or a single module if given the module id. Prior to returning, each module is passed through the _clean_mod() function to remove any private state attrs present. Private state attrs are denoted by an underscore prefix. OnRamp ships with several example modules. These modules aren't checked out to the PCE service by default, but may be checked out by the system administrator. The get_available_modules() function returns a list of these modules.

.. automodule:: PCE.tools.modules
   :members:

PCE.tools.jobs
--------------

This Python module contains a class for working with job state (documented in the section, Working with Module and Job State) and the following:

For administering jobs:
The launch_job() function initiates the launch of a parallel job using the given module and paramaters. Job state is initialized, the given module is checked for valid state, required directory structure is created, and given run parameters are verified against the modules config/onramp_uioptions.cfgspec file using the configobj library. If all is well, bin/onramp_preprocess.py is executed and its output (good or bad) is logged. A scheduler instance is then obtained for the scheduler that matches the config in onramp/pce/onramp_pce_config.cfg and used to schedule the job. The init_job_delete() function is used to trigger deletion of a job. In the current version of the PCE, jobs may exist in states that cannot allow immediate deletion (mostly when bin/onramp_*.py scripts are executing), thus, this function does not perform any of actions needed for deletion. These are accomplished by the call to _delete_job(). If the job is in an acceptable delete state when init_job_delete() is called, then _delete_job() is immediately called. If not, the job's state is flagged for deletion when the job reaches an acceptable delete state. For this reason, all transitions of job state from an unacceptable delete state to an acceptable one must check the job's state and call _delete_job() if the state is flagged for deletion.

For viewing jobs on the system:
The get_jobs() function returns a list of jobs available on the system, or a single job if given the job id. The function calls the _build_job() function, which updates state and currates job results as required prior to returning the job. Here, job state is checked and, if appropriate, a scheduler instance returns the state of the job as maintained by the system's scheduler. Depending on this state, _get_module_status_output() may be called to launch bin/onramp_status.py or _job_postprocess() may be called to initiate postprocessing (and subsequently call and log output from bin/onramp_postprocess.py). After these actions are launched and the job's state (as maintained by the PCE, not the system scheduler) is updated, _build_job() returns the job back to get_jobs(). Prior to returning from get_jobs(), each job is passed through the _clean_job() function to remove any private state attrs present. Private state attrs are denoted by an underscore prefix.

.. automodule:: PCE.tools.jobs
   :members:

PCE.schedulers
--------------

This module provides a base class for scheduler classes to be derived from, scheduler classes for supported batch schedulers, and a generic constructor which returns and instance of the proper scheduler class given the type.

Adding a new scheduler
~~~~~~~~~~~~~~~~~~~~~~

To add a new scheduler, derive from the _BatchScheduler base class, and define the following methods:

.. autoclass:: PCE.tools.schedulers._BatchScheduler
   :members:

Instantiating a scheduler
~~~~~~~~~~~~~~~~~~~~~~~~~

The constructor Scheduler(type) should be used to instantiate a scheduler of the given type, where type is the string checked by the is_scheduler_for classmethod for the desired scheduler class.

.. autofunction:: PCE.tools.schedulers.Scheduler
